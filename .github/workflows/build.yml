name: Build Android Version

on:
  workflow_dispatch:

jobs:

  buildEnvAndSetUpAppApk:
    runs-on: ubuntu-latest

    steps:
      # Check out the code
      - uses: actions/checkout@v4

      # Pull the custom Docker image
      - name: Pull custom Docker image
        run: |
          docker pull ghcr.io/alexjyong/babbypaint:main

      # Prepare environment and build the Cordova apk file
      - name: Prepare environment and build
        run: |
          echo $JKS_KEYSTORE_BASE64 > upload-keystore.jks.b64
          base64 -d upload-keystore.jks.b64 > upload-keystore.jks
          mv upload-keystore.jks src/
          docker run --rm -i -v $PWD:/workspace -w /workspace --privileged ghcr.io/alexjyong/babbypaint:main sh -c "
            rm -rf .github &&
            cd src &&
            rm -rf platforms/android
            rm -rf plugins
            cordova platform add android --verbose &&
            cordova plugin add cordova-plugin-x-toast &&
            cordova plugin add cordova-plugin-screen-pinning --verbose &&
            cordova build android --release -- --keystore=/workspace/src/upload-keystore.jks --storePassword=$KEYSTORE_PASSWORD --alias=uploadkey --password=$ALIAS_PASSWORD --packageType=apk"
        env:
          ALIAS_PASSWORD: ${{ secrets.ALIAS_PASSWORD }}
          JKS_KEYSTORE_BASE64: ${{ secrets.JKS_KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
      
      - name: Move APK file
        run: |
          APK_PATH=$(find src -name '*.apk')
          if [ -z "$APK_PATH" ]; then
            echo "No APK file found!"
            exit 1
          fi
          mkdir -p /workspace/apk
          mv "$APK_PATH" /workspace/apk/
          ls /workspace/spk

      - name: Manually sign the APK
        run: |
          APK_PATH=$(find src -name '*.apk')
          if [ -z "$APK_PATH" ]; then
            echo "No APK file found!"
            exit 1
          fi
          docker run --rm -v $PWD:/workspace -w /workspace --privileged ghcr.io/alexjyong/babbypaint:main sh -c "
            apksigner sign --ks /workspace/src/upload-keystore.jks --ks-key-alias uploadkey --ks-pass pass:$KEYSTORE_PASSWORD --key-pass pass:$ALIAS_PASSWORD --out /workspace/apk/signed.apk $APK_PATH"
        env:
          ALIAS_PASSWORD: ${{ secrets.ALIAS_PASSWORD }}
          JKS_KEYSTORE_BASE64: ${{ secrets.JKS_KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      # Verify the APK signature using apksigner
      - name: Verify APK signature
        run: |
          APK_PATH=$(find src -name '*.apk')
          if [ -z "$APK_PATH" ]; then
            echo "No APK file found!"
            exit 1
          fi
          docker run --rm -v $PWD:/workspace -w /workspace --privileged ghcr.io/alexjyong/babbypaint:main sh -c "
            apksigner verify $APK_PATH"
      
      # Upload the built APK file as an artifact
      - uses: actions/upload-artifact@v4
        with:
          name: babby-paint-apk-file
          path: /workspace/apk/*.apk

  buildEnvAndSetUpAppAab:
    runs-on: ubuntu-latest

    steps:
      # Check out the code
      - uses: actions/checkout@v4

      # Pull the custom Docker image
      - name: Pull custom Docker image
        run: |
          docker pull ghcr.io/alexjyong/babbypaint:main

      # Prepare environment and build the babbypaint aab file
      - name: Prepare environment and build
        run: |
          echo $JKS_KEYSTORE_BASE64 > upload-keystore.jks.b64
          base64 -d upload-keystore.jks.b64 > upload-keystore.jks
          mv upload-keystore.jks src/
          docker run --rm -i -v $PWD:/workspace -w /workspace --privileged ghcr.io/alexjyong/babbypaint:main sh -c "
            rm -rf .github &&
            cd src &&
            rm -rf platforms/android
            rm -rf plugins
            cordova platform add android --verbose &&
            cordova plugin add cordova-plugin-x-toast &&
            cordova plugin add cordova-plugin-screen-pinning --verbose &&
            cordova build android --release -- --keystore=/workspace/src/upload-keystore.jks --storePassword=$KEYSTORE_PASSWORD --alias=uploadkey --password=$ALIAS_PASSWORD --packageType=bundle"
        env:
          ALIAS_PASSWORD: ${{ secrets.ALIAS_PASSWORD }}
          JKS_KEYSTORE_BASE64: ${{ secrets.JKS_KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      # Manually sign the AAB using jarsigner
      - name: Manually sign the AAB
        run: |
          AAB_PATH=$(find src -name '*.aab')
          if [ -z "$AAB_PATH" ]; then
            echo "No AAB file found!"
            exit 1
          fi
          docker run --rm -v $PWD:/workspace -w /workspace --privileged ghcr.io/alexjyong/babbypaint:main sh -c "
            jarsigner -verbose -keystore /workspace/src/upload-keystore.jks -storepass $KEYSTORE_PASSWORD -keypass $ALIAS_PASSWORD $AAB_PATH uploadkey"
        env:
          ALIAS_PASSWORD: ${{ secrets.ALIAS_PASSWORD }}
          JKS_KEYSTORE_BASE64: ${{ secrets.JKS_KEYSTORE_BASE64 }}
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}

      # Verify the AAB signature using jarsigner
      - name: Verify AAB signature
        run: |
          AAB_PATH=$(find src -name '*.aab')
          if [ -z "$AAB_PATH" ]; then
            echo "No AAB file found!"
            exit 1
          fi
          docker run --rm -v $PWD:/workspace -w /workspace --privileged ghcr.io/alexjyong/babbypaint:main sh -c "
            jarsigner -verify -verbose -certs $AAB_PATH"

      # Find and move the signed AAB file to the workspace
      - name: Move AAB file
        run: |
          AAB_PATH=$(find src -name '*.aab')
          if [ -z "$AAB_PATH" ]; then
            echo "No AAB file found!"
            exit 1
          fi
          sudo mkdir -p /workspace/aab
          sudo mv "$AAB_PATH" /workspace/aab/

      # Upload the built AAB file as an artifact
      - uses: actions/upload-artifact@v4
        with:
          name: babby-paint-aab-file
          path: /workspace/aab/*.aab
